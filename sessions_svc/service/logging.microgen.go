// Code generated by microgen 1.0.5. DO NOT EDIT.

package service

import (
	"context"
	model "github.com/SurajKadam7/session-service/model"
	service "github.com/SurajKadam7/session-service/sessions_svc"
	log "github.com/go-kit/log"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M loggingMiddleware) Add(arg0 context.Context, arg1 model.SessionInfo) (res0 model.SessionInfo, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Add",
			"message", "Add called",
			"request", logAddRequest{SessionInfo: arg1},
			"response", logAddResponse{Res: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Add(arg0, arg1)
}

func (M loggingMiddleware) SendMsg(arg0 context.Context, arg1 int, arg2 model.Message) (res0 bool, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "SendMsg",
			"message", "SendMsg called",
			"request", logSendMsgRequest{
				Message: arg2,
				UserId:  arg1,
			},
			"response", logSendMsgResponse{Status: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.SendMsg(arg0, arg1, arg2)
}

func (M loggingMiddleware) SendGroupMsg(arg0 context.Context, arg1 int, arg2 int, arg3 model.Message) (res0 bool, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "SendGroupMsg",
			"message", "SendGroupMsg called",
			"request", logSendGroupMsgRequest{
				GroupId: arg2,
				Message: arg3,
				UserId:  arg1,
			},
			"response", logSendGroupMsgResponse{Status: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.SendGroupMsg(arg0, arg1, arg2, arg3)
}

func (M loggingMiddleware) Remove(arg0 context.Context, arg1 int) (res0 model.SessionInfo, res1 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Remove",
			"message", "Remove called",
			"request", logRemoveRequest{UserId: arg1},
			"response", logRemoveResponse{Res: res0},
			"err", res1,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Remove(arg0, arg1)
}

type (
	logAddRequest struct {
		SessionInfo model.SessionInfo
	}
	logAddResponse struct {
		Res model.SessionInfo
	}
	logSendMsgRequest struct {
		UserId  int
		Message model.Message
	}
	logSendMsgResponse struct {
		Status bool
	}
	logSendGroupMsgRequest struct {
		UserId  int
		GroupId int
		Message model.Message
	}
	logSendGroupMsgResponse struct {
		Status bool
	}
	logRemoveRequest struct {
		UserId int
	}
	logRemoveResponse struct {
		Res model.SessionInfo
	}
)
